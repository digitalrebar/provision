- Available: true
  BootParams: ""
  Bundle: BasicStore
  Description: The boot environment you should use to have unknown machines boot off
    their local hard drive
  Documentation: ""
  Endpoint: ""
  Errors: []
  Initrds: []
  Kernel: ""
  Loaders: {}
  Meta:
    color: green
    feature-flags: change-stage-v2
    icon: circle thin
    title: Digital Rebar Provision
  Name: ignore
  OS:
    Codename: ""
    Family: ""
    IsoFile: ""
    IsoSha256: ""
    IsoUrl: ""
    Name: ignore
    SupportedArchitectures: {}
    Version: ""
  OnlyUnknown: true
  OptionalParams: []
  ReadOnly: true
  RequiredParams: []
  Templates:
  - Contents: |
      DEFAULT local
      PROMPT 0
      TIMEOUT 10
      LABEL local
      {{.Param "pxelinux-local-boot"}}
    ID: ""
    Meta: {}
    Name: pxelinux
    Path: pxelinux.cfg/default
  - Contents: |
      #!ipxe
      chain {{.ProvisionerURL}}/${netX/mac}.ipxe && exit || goto chainip
      :chainip
      chain tftp://{{.ProvisionerAddress}}/${netX/ip}.ipxe || exit
    ID: ""
    Meta: {}
    Name: ipxe
    Path: default.ipxe
  - Contents: |
      set _kernel=linux
      set _module=initrd
      $_kernel
      if test $? != 18; then
          set _kernel=linuxefi
          set _module=initrdefi
      fi
      function kernel { $_kernel "$@"; }
      function module { $_module "$@"; }
      if test -s (tftp)/grub/${net_default_mac}.cfg; then
          echo "Booting via MAC"
          source (tftp)/grub/${net_default_mac}.cfg
          boot
      elif test -s (tftp)/grub/${net_default_ip}.cfg; then
          echo "Booting via IP"
          source (tftp)/grub/${net_default_ip}.cfg
          boot
      elif test $grub_platform == pc; then
          chainloader (hd0)
      else
          bpx=/efi/boot
          root='' prefix=''
          search --file --set=root $bpx/bootx64.efi || search --file --set=root $bpx/bootaa64.efi
          if test x$root == x; then
              echo "No EFI boot partiton found."
              echo "Rebooting in 120 seconds"
              sleep 120
              reboot
          fi
          if test -f ($root)/efi/microsoft/boot/bootmgfw.efi; then
              echo "Microsoft Windows found, chainloading into it"
              chainloader ($root)/efi/microsoft/boot/bootmgfw.efi
          fi
          for f in ($root)/efi/*; do
              if test -f $f/grub.cfg; then
                  prefix=$f
                  break
              fi
          done
          if test x$prefix == x; then
              echo "Unable to find grub.cfg"
              echo "Rebooting in 120 seconds"
              sleep 120
              reboot
          fi
          configfile $prefix/grub.cfg
      fi
    ID: ""
    Meta: {}
    Name: grub
    Path: grub/grub.cfg
  Validated: true
- Available: true
  BootParams: ""
  Bundle: BasicStore
  Description: The boot environment you should use to have known machines boot off
    their local hard drive
  Documentation: ""
  Endpoint: ""
  Errors: []
  Initrds: []
  Kernel: ""
  Loaders: {}
  Meta:
    color: green
    feature-flags: change-stage-v2
    icon: radio
    title: Digital Rebar Provision
  Name: local
  OS:
    Codename: ""
    Family: ""
    IsoFile: ""
    IsoSha256: ""
    IsoUrl: ""
    Name: local
    SupportedArchitectures: {}
    Version: ""
  OnlyUnknown: false
  OptionalParams: []
  ReadOnly: true
  RequiredParams: []
  Templates:
  - Contents: |
      DEFAULT local
      PROMPT 0
      TIMEOUT 10
      LABEL local
      {{.Param "pxelinux-local-boot"}}
    ID: ""
    Meta: {}
    Name: pxelinux
    Path: pxelinux.cfg/{{.Machine.HexAddress}}
  - Contents: |
      #!ipxe
      exit
    ID: ""
    Meta: {}
    Name: ipxe
    Path: '{{.Machine.Address}}.ipxe'
  - Contents: |
      DEFAULT local
      PROMPT 0
      TIMEOUT 10
      LABEL local
      {{.Param "pxelinux-local-boot"}}
    ID: ""
    Meta: {}
    Name: pxelinux-mac
    Path: pxelinux.cfg/{{.Machine.MacAddr "pxelinux"}}
  - Contents: |
      #!ipxe
      exit
    ID: ""
    Meta: {}
    Name: ipxe-mac
    Path: '{{.Machine.MacAddr "ipxe"}}.ipxe'
  - Contents: |
      if test $grub_platform == pc; then
          chainloader (hd0)
      else
          bpx=/efi/boot
          root='' prefix=''
          search --file --set=root $bpx/bootx64.efi || search --file --set=root $bpx/bootaa64.efi
          if test x$root == x; then
              echo "No EFI boot partiton found."
              echo "Rebooting in 120 seconds"
              sleep 120
              reboot
          fi
          if test -f ($root)/efi/microsoft/boot/bootmgfw.efi; then
              echo "Microsoft Windows found, chainloading into it"
              chainloader ($root)/efi/microsoft/boot/bootmgfw.efi
          fi
          for f in ($root)/efi/*; do
              if test -f $f/grub.cfg; then
                  prefix=$f
                  break
              fi
          done
          if test x$prefix == x; then
              echo "Unable to find grub.cfg"
              echo "Rebooting in 120 seconds"
              sleep 120
              reboot
          fi
          configfile $prefix/grub.cfg
      fi
    ID: ""
    Meta: {}
    Name: grub
    Path: grub/{{.Machine.Address}}.cfg
  - Contents: |
      if test $grub_platform == pc; then
          chainloader (hd0)
      else
          bpx=/efi/boot
          root='' prefix=''
          search --file --set=root $bpx/bootx64.efi || search --file --set=root $bpx/bootaa64.efi
          if test x$root == x; then
              echo "No EFI boot partiton found."
              echo "Rebooting in 120 seconds"
              sleep 120
              reboot
          fi
          if test -f ($root)/efi/microsoft/boot/bootmgfw.efi; then
              echo "Microsoft Windows found, chainloading into it"
              chainloader ($root)/efi/microsoft/boot/bootmgfw.efi
          fi
          for f in ($root)/efi/*; do
              if test -f $f/grub.cfg; then
                  prefix=$f
                  break
              fi
          done
          if test x$prefix == x; then
              echo "Unable to find grub.cfg"
              echo "Rebooting in 120 seconds"
              sleep 120
              reboot
          fi
          configfile $prefix/grub.cfg
      fi
    ID: ""
    Meta: {}
    Name: grub-mac
    Path: grub/{{.Machine.MacAddr "grub"}}.cfg
  Validated: true

