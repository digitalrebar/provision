[
  {
    "Available": true,
    "BootParams": "",
    "Bundle": "BasicStore",
    "Description": "The boot environment you should use to have unknown machines boot off their local hard drive",
    "Documentation": "",
    "Endpoint": "",
    "Errors": [],
    "Initrds": [],
    "Kernel": "",
    "Loaders": {},
    "Meta": {
      "color": "green",
      "feature-flags": "change-stage-v2",
      "icon": "circle thin",
      "title": "Digital Rebar Provision"
    },
    "Name": "ignore",
    "OS": {
      "Codename": "",
      "Family": "",
      "IsoFile": "",
      "IsoSha256": "",
      "IsoUrl": "",
      "Name": "ignore",
      "SupportedArchitectures": {},
      "Version": ""
    },
    "OnlyUnknown": true,
    "OptionalParams": [],
    "ReadOnly": true,
    "RequiredParams": [],
    "Templates": [
      {
        "Contents": "DEFAULT local\nPROMPT 0\nTIMEOUT 10\nLABEL local\n{{.Param \"pxelinux-local-boot\"}}\n",
        "ID": "",
        "Meta": {},
        "Name": "pxelinux",
        "Path": "pxelinux.cfg/default"
      },
      {
        "Contents": "#!ipxe\nchain {{.ProvisionerURL}}/${netX/mac}.ipxe \u0026\u0026 exit || goto chainip\n:chainip\nchain tftp://{{.ProvisionerAddress}}/${netX/ip}.ipxe || exit\n",
        "ID": "",
        "Meta": {},
        "Name": "ipxe",
        "Path": "default.ipxe"
      },
      {
        "Contents": "set _kernel=linux\nset _module=initrd\n$_kernel\nif test $? != 18; then\n    set _kernel=linuxefi\n    set _module=initrdefi\nfi\nfunction kernel { $_kernel \"$@\"; }\nfunction module { $_module \"$@\"; }\nif test -s (tftp)/grub/${net_default_mac}.cfg; then\n    echo \"Booting via MAC\"\n    source (tftp)/grub/${net_default_mac}.cfg\n    boot\nelif test -s (tftp)/grub/${net_default_ip}.cfg; then\n    echo \"Booting via IP\"\n    source (tftp)/grub/${net_default_ip}.cfg\n    boot\nelif test $grub_platform == pc; then\n    chainloader (hd0)\nelse\n    bpx=/efi/boot\n    root='' prefix=''\n    search --file --set=root $bpx/bootx64.efi || search --file --set=root $bpx/bootaa64.efi\n    if test x$root == x; then\n        echo \"No EFI boot partiton found.\"\n        echo \"Rebooting in 120 seconds\"\n        sleep 120\n        reboot\n    fi\n    if test -f ($root)/efi/microsoft/boot/bootmgfw.efi; then\n        echo \"Microsoft Windows found, chainloading into it\"\n        chainloader ($root)/efi/microsoft/boot/bootmgfw.efi\n    fi\n    for f in ($root)/efi/*; do\n        if test -f $f/grub.cfg; then\n            prefix=$f\n            break\n        fi\n    done\n    if test x$prefix == x; then\n        echo \"Unable to find grub.cfg\"\n        echo \"Rebooting in 120 seconds\"\n        sleep 120\n        reboot\n    fi\n    configfile $prefix/grub.cfg\nfi\n",
        "ID": "",
        "Meta": {},
        "Name": "grub",
        "Path": "grub/grub.cfg"
      }
    ],
    "Validated": true
  },
  {
    "Available": true,
    "BootParams": "",
    "Bundle": "BasicStore",
    "Description": "The boot environment you should use to have known machines boot off their local hard drive",
    "Documentation": "",
    "Endpoint": "",
    "Errors": [],
    "Initrds": [],
    "Kernel": "",
    "Loaders": {},
    "Meta": {
      "color": "green",
      "feature-flags": "change-stage-v2",
      "icon": "radio",
      "title": "Digital Rebar Provision"
    },
    "Name": "local",
    "OS": {
      "Codename": "",
      "Family": "",
      "IsoFile": "",
      "IsoSha256": "",
      "IsoUrl": "",
      "Name": "local",
      "SupportedArchitectures": {},
      "Version": ""
    },
    "OnlyUnknown": false,
    "OptionalParams": [],
    "ReadOnly": true,
    "RequiredParams": [],
    "Templates": [
      {
        "Contents": "DEFAULT local\nPROMPT 0\nTIMEOUT 10\nLABEL local\n{{.Param \"pxelinux-local-boot\"}}\n",
        "ID": "",
        "Meta": {},
        "Name": "pxelinux",
        "Path": "pxelinux.cfg/{{.Machine.HexAddress}}"
      },
      {
        "Contents": "#!ipxe\nexit\n",
        "ID": "",
        "Meta": {},
        "Name": "ipxe",
        "Path": "{{.Machine.Address}}.ipxe"
      },
      {
        "Contents": "DEFAULT local\nPROMPT 0\nTIMEOUT 10\nLABEL local\n{{.Param \"pxelinux-local-boot\"}}\n",
        "ID": "",
        "Meta": {},
        "Name": "pxelinux-mac",
        "Path": "pxelinux.cfg/{{.Machine.MacAddr \"pxelinux\"}}"
      },
      {
        "Contents": "#!ipxe\nexit\n",
        "ID": "",
        "Meta": {},
        "Name": "ipxe-mac",
        "Path": "{{.Machine.MacAddr \"ipxe\"}}.ipxe"
      },
      {
        "Contents": "if test $grub_platform == pc; then\n    chainloader (hd0)\nelse\n    bpx=/efi/boot\n    root='' prefix=''\n    search --file --set=root $bpx/bootx64.efi || search --file --set=root $bpx/bootaa64.efi\n    if test x$root == x; then\n        echo \"No EFI boot partiton found.\"\n        echo \"Rebooting in 120 seconds\"\n        sleep 120\n        reboot\n    fi\n    if test -f ($root)/efi/microsoft/boot/bootmgfw.efi; then\n        echo \"Microsoft Windows found, chainloading into it\"\n        chainloader ($root)/efi/microsoft/boot/bootmgfw.efi\n    fi\n    for f in ($root)/efi/*; do\n        if test -f $f/grub.cfg; then\n            prefix=$f\n            break\n        fi\n    done\n    if test x$prefix == x; then\n        echo \"Unable to find grub.cfg\"\n        echo \"Rebooting in 120 seconds\"\n        sleep 120\n        reboot\n    fi\n    configfile $prefix/grub.cfg\nfi\n",
        "ID": "",
        "Meta": {},
        "Name": "grub",
        "Path": "grub/{{.Machine.Address}}.cfg"
      },
      {
        "Contents": "if test $grub_platform == pc; then\n    chainloader (hd0)\nelse\n    bpx=/efi/boot\n    root='' prefix=''\n    search --file --set=root $bpx/bootx64.efi || search --file --set=root $bpx/bootaa64.efi\n    if test x$root == x; then\n        echo \"No EFI boot partiton found.\"\n        echo \"Rebooting in 120 seconds\"\n        sleep 120\n        reboot\n    fi\n    if test -f ($root)/efi/microsoft/boot/bootmgfw.efi; then\n        echo \"Microsoft Windows found, chainloading into it\"\n        chainloader ($root)/efi/microsoft/boot/bootmgfw.efi\n    fi\n    for f in ($root)/efi/*; do\n        if test -f $f/grub.cfg; then\n            prefix=$f\n            break\n        fi\n    done\n    if test x$prefix == x; then\n        echo \"Unable to find grub.cfg\"\n        echo \"Rebooting in 120 seconds\"\n        sleep 120\n        reboot\n    fi\n    configfile $prefix/grub.cfg\nfi\n",
        "ID": "",
        "Meta": {},
        "Name": "grub-mac",
        "Path": "grub/{{.Machine.MacAddr \"grub\"}}.cfg"
      }
    ],
    "Validated": true
  }
]
