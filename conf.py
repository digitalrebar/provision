#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017 RackN Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Digital Rebar documentation build configuration file, created by
# sphinx-quickstart on Sat Mar  5 15:37:12 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import requests
import shutil

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
# For swaggerdoc > pip install sphinxcontrib-swaggerdoc
extensions = [
    'sphinx.ext.todo',
    'sphinx.ext.imgmath',
    'sphinxcontrib.swaggerdoc',
    'sphinxcontrib.youtube',
    'sphinx.ext.graphviz',
]

graphviz_output_format = 'svg'

# Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'README'

# General information about the project.
project = u'Digital Rebar'
copyright = u'2020, RackN Inc'
license = u'Apache v2'
author = u'RackN Inc'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'4.x'
# The full version, including alpha/beta/rc tags.
release = u'v4.x'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    '_build',
    'role_errors/*',
    'development/testing-bdd/*',
    'vendor',
    'src',
    'integrations/websockets/README.rst',
    'drp-data',
    'doc-override',
    'rebar-catalog',
    'rel_notes',
    'venv',
]

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'bizstyle'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = "Digital Rebar Docs"

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = "DRP"

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "doc/images/digital_rebar_small.png"

# The name of an image file (relative to this directory) to use as a favicon of
# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "doc/images/digitalrebar.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
htmlstatic_path = ['static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'DigitalRebar_Provision'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',

# Latex figure (float) alignment
#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'DigitalRebar_Provision.tex', u'Digital Rebar Documentation',
     u'RackN team', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'dr-provision', u'Digital Rebar Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Digital Rebar', u'Digital Rebar Documentation',
     author, 'Digital Rebar', 'Golang API-Driven Provisioning Workflow.',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

# Skip download
skip = False
if os.path.isfile('skip-doc-download'):
    skip = True

# Get the extra pieces - if they exist
folder = 'doc/content-packages'
for the_file in os.listdir(folder):
    if skip:
        continue
    if the_file == '.keep-me':
        continue
    file_path = os.path.join(folder, the_file)
    try:
        if os.path.isfile(file_path):
            os.unlink(file_path)
    except Exception as e:
        print(e)


def fetch_n_save(urls, path):
    if skip:
        return
    for url in urls:
        url = url.strip()
        filename = url.rsplit('/', 1)[-1]
        r = requests.get(url, verify=True, stream=True)
        r.raw.decode_content = True
        with open("{0}/{1}".format(path, filename), 'wb') as f:
            shutil.copyfileobj(r.raw, f)

def fetch_urls(url):
    r = requests.get(url, verify=True, stream=True)
    r.raw.decode_content = True
    with open("/tmp/tmp.builder", 'wb') as f:
        shutil.copyfileobj(r.raw, f)
    with open('/tmp/tmp.builder') as my_file:
        testsite_array = my_file.readlines()
    return testsite_array


urls = [
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/ad-auth.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/agent.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/basic-store.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/bios.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/burnin.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/callback.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/certs.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/chef-bootstrap.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/classify.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/cloud-wrappers.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/cohesity.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/coreos.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/dell-support.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/dev-library.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/drp-community-content.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/drp-community-contrib.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/drp-prom-mon.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/edge-lab.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/eikon.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/endpoint-exec.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/filebeat.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/flash.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/flexiflow.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/honeycomb.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/hpe-support.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/image-builder.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/image-deploy.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/ipmi.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/kube-lib.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/krib.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/kvm-test.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/lenovo-support.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/os-other.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/packer-builder.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/packet-ipmi.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/proxmox.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rack.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/raid.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rancheros.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/slack.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/sledgehammer-builder.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/solidfire.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/task-library.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/tenant-controller.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/tower.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/ux-views.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/universal.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/validation.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/virtualbox-ipmi.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/vmware.rst",
    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/vmware-lib.rst",
]
fetch_n_save(urls, path="doc/content-packages")

#urls = [
#    "https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/commands.rst",
#]
#fetch_n_save(urls, path="doc/operations")

urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/drp.filelist")
fetch_n_save(urls, path="doc/rel_notes/drp")
urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/drp-server.filelist")
fetch_n_save(urls, path="doc/rel_notes/drp-server")
urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/drp-content.filelist")
fetch_n_save(urls, path="doc/rel_notes/drp-content")
urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/drp-plugins.filelist")
fetch_n_save(urls, path="doc/rel_notes/drp-plugins")
urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/rackn-plugins.filelist")
fetch_n_save(urls, path="doc/rel_notes/rackn-plugins")
urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/rackn-cohesity.filelist")
fetch_n_save(urls, path="doc/rel_notes/rackn-cohesity")
urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/rackn-solidfire.filelist")
fetch_n_save(urls, path="doc/rel_notes/rackn-solidfire")
urls = fetch_urls("https://s3-us-west-2.amazonaws.com/rebar-catalog/docs/rel-notes/rackn-ux.filelist")
fetch_n_save(urls, path="doc/rel_notes/rackn-ux")

dest_folder = 'doc/content-packages'
src_folder = 'doc-override'
for the_file in os.listdir(src_folder):
    if the_file == '.keep-me':
        continue
    src_file_path = os.path.join(src_folder, the_file)
    dest_file_path = os.path.join(dest_folder, the_file)
    try:
        if os.path.isfile(dest_file_path):
            os.unlink(dest_file_path)
        shutil.copy(src_file_path, dest_file_path)
    except Exception as e:
        print(e)
